name: CI
on:
  push:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.3
      - uses: actions/setup-node@v3
        with:
          node-version: 21.x
          cache: "pnpm"
          registry-url: https://registry.npmjs.org


      - run: pnpm install --frozen-lockfile
      - run: pnpm lint
      - run: pnpm test
      - run: pnpm build

  auto-tag:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.3

      - name: Get last tag
        id: get_last_tag
        run: echo tag=$(git describe --abbrev=0 --tags --always --first-parent HEAD) >> $GITHUB_OUTPUT
      - name: Get commit message
        id: get_commit_message
        run: echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
      - name: Auto-tag
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          LAST_TAG: ${{ steps.get_last_tag.outputs.tag }}
          MESSAGE: ${{ steps.get_commit_message.outputs.message }}
        run: |
          git config user.name autotag
          git config user.email autotag@github.com
          echo "Last tag: $LAST_TAG"
          TAG_PARTS=(${LAST_TAG//./ })
          if [[ $MESSAGE == *'!'* ]]; then
            NEW_TAG=$((${TAG_PARTS[0]}+1)).0.0
          elif [[ $MESSAGE == *'feat'* ]]; then
            NEW_TAG=${TAG_PARTS[0]}.$((${TAG_PARTS[1]}+1)).0
          elif [[ $MESSAGE == *'fix'* ]]; then
            NEW_TAG=${TAG_PARTS[0]}.${TAG_PARTS[1]}.$((${TAG_PARTS[2]}+1))
          else
            echo "Nothing to tag"
            exit 0
          fi
          git tag -a $NEW_TAG -m "$MESSAGE"
          git push origin $NEW_TAG
          pnpm version $NEW_TAG

  publish:
    needs: [ci, auto-tag]
    runs-on: ubuntu-latest
    steps:
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.3

      - run: | 
          ls -la
          echo "TAG $NEW_TAG"
          echo "MESSAGE $MESSAGE"
          pnpm version
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
      - run: pnpm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
